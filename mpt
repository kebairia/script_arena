#!/bin/env sh
#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃         ┏┳┓┏━┓━┳━  ┏━┓┏━┓┏━┓╻┏━┓━┳━         ┃
#┃         ┃╹┃┣━┛ ┃   ┗━┓┃  ┣┳┛┃┣━┛ ┃          ┃
#┃         ╹ ╹╹   ╹   ┗━┛┗━┛╹┗╸╹╹   ╹          ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
#----------------------------------------------------------
# MPT: ~o(( a script to watch youtube videos using mpv ))o~
#----------------------------------------------------------
# mpv uses directly the best video quality that a particular youtube video provides to play
# this script helps you to select the quality you want

#TODO: don't process a link that its already in the queue
## use --batch-file  
#TODO: audio only option
#TODO: better dmenu interface
#TODO: if the link was from invidious.snopyta.org, substitute it with youtube.com

# create a tempfile and store the video quality and codes in it
link="${1:-$(xclip -o -selection clipboard)}" && notify-send " Loading Youtube Video..."
# Extract video infos
vid_info="$( youtube-dl -F ${link} )"
maxfilesize=2048
vid_log_file=${XDG_CACHE_HOME}/mpt.log

# Extract the sound code
snd_code=$(echo "${vid_info}" \
	       | awk '/audio only/{print $1" "$NF}' \
	| sort -n -k2 \
	| head -1 \
	| awk '{print $1}')
# prompt me for video resolutions available, then extract its code
vid_code=$(echo "${vid_info}" \
	       | awk '/video only/{print $1" "$3" "$NF}' \
	| sort -n -k3 \
	| sort -nu -k2 \
	|  dmenu -l 20 -fn FantasqueSansMono-13 -p " Select video quality:" \
	| awk '{print $1}')


# combine the two format and play them in realtime
[ ! -z $link ] && setsid mpv --ytdl-raw-options=format="$vid_code"+"$snd_code" ${link} 

#####################
#      LOGGING
#####################
# Extract video title
vid_title="$( youtube-dl --get-title ${link} )"
# log the video's link into ~/.cache/mpt.log, before the video starts 
echo "[$(date '+%F_%T')]:${link},${vid_title}" >> ${vid_log_file}
# needs maintaince
# last_stamp_date=$(tail -1 ~/.cache/mpt.log  \
    #                       | sed 's/\[//g;s/\]//g' \
    #                       | awk -F '_' '{print $1}')
# # if last_stamp_date was'nt empty, and it is not equal for today's date, make a line with today's date
# [ ! -z $last_stamp_date ] \
    #     && [ ! "$last_stamp_date" == "$(date '+%F')"] \
    #     && echo "------ $(date '+%F_%T') ------"
#####################
#      LOGROTATE
#####################
#FILESIZE=$(du -b "${LOG_FILE}" | tr -s '\t' ' ' | cut -d ' ' -f1)
#if [ ${FILESIZE} -gt ${MAXFILESIZE}];then
    #timestamp=$(date '+%s')
    #mv ${LOG_FILE} ${LOG_FILE}.${timestamp}
    #touch ${LOG_FILE}
#fi
